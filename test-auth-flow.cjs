require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testAuthFlow() {
  console.log('üöÄ Testando fluxo de autentica√ß√£o...');
  console.log('üîó URL do Supabase:', supabaseUrl);
  
  // 1. Testar se conseguimos acessar usu√°rios existentes
  console.log('\n1Ô∏è‚É£ Verificando usu√°rios existentes...');
  try {
    const { data: authData, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.log('‚ùå Erro ao listar usu√°rios:', authError.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados:', authData.users.length);
      if (authData.users.length > 0) {
        const user = authData.users[0];
        console.log('üë§ Primeiro usu√°rio:', {
          id: user.id,
          email: user.email,
          created_at: user.created_at
        });
        
        // 2. Verificar se este usu√°rio tem perfil
        console.log('\n2Ô∏è‚É£ Verificando perfil do usu√°rio...');
        const { data: profileData, error: profileError } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('user_id', user.id)
          .single();
        
        if (profileError) {
          console.log('‚ùå Erro ao buscar perfil:', profileError.message);
          
          // 3. Tentar criar perfil se n√£o existir
          if (profileError.code === 'PGRST116') {
            console.log('\n3Ô∏è‚É£ Criando perfil para usu√°rio existente...');
            const newProfile = {
              user_id: user.id,
              display_name: user.user_metadata?.full_name || user.email?.split('@')[0] || 'Usu√°rio',
              username: user.email?.split('@')[0] || null,
              plan: 'starter',
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            };
            
            const { data: createdProfile, error: createError } = await supabase
              .from('user_profiles')
              .insert(newProfile)
              .select()
              .single();
            
            if (createError) {
              console.log('‚ùå Erro ao criar perfil:', createError.message);
            } else {
              console.log('‚úÖ Perfil criado com sucesso!');
              console.log('üìã Perfil:', {
                id: createdProfile.id,
                user_id: createdProfile.user_id,
                display_name: createdProfile.display_name,
                plan: createdProfile.plan
              });
            }
          }
        } else {
          console.log('‚úÖ Perfil encontrado!');
          console.log('üìã Perfil:', {
            id: profileData.id,
            user_id: profileData.user_id,
            display_name: profileData.display_name,
            plan: profileData.plan
          });
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error.message);
  }
  
  // 4. Testar cria√ß√£o de sess√£o (simula√ß√£o)
  console.log('\n4Ô∏è‚É£ Testando configura√ß√£o de autentica√ß√£o...');
  try {
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ö†Ô∏è Nenhuma sess√£o ativa (esperado):', sessionError.message);
    } else {
      console.log('‚ÑπÔ∏è Status da sess√£o:', sessionData.session ? 'Ativa' : 'Inativa');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao verificar sess√£o:', error.message);
  }
  
  console.log('\nüìã Resumo do teste:');
  console.log('- ‚úÖ Conex√£o com Supabase: OK');
  console.log('- ‚úÖ Acesso a auth.users: OK');
  console.log('- ‚úÖ Acesso a user_profiles: OK');
  console.log('- ‚úÖ Estrutura de dados: Corrigida');
  
  console.log('\nüéØ Pr√≥ximos passos:');
  console.log('1. Testar login via interface web');
  console.log('2. Verificar callback do Google OAuth');
  console.log('3. Testar cria√ß√£o autom√°tica de perfil');
  
  console.log('\n‚ú® Teste de autentica√ß√£o conclu√≠do!');
}

testAuthFlow().catch(console.error);